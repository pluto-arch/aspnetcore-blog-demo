<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pluto.BlogCore.API</name>
    </assembly>
    <members>
        <member name="T:Pluto.BlogCore.API.Controllers.ApiBaseController`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Pluto.BlogCore.API.Controllers.ApiBaseController`1._mediator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pluto.BlogCore.API.Controllers.ApiBaseController`1._logger">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pluto.BlogCore.API.Controllers.ApiBaseController`1._eventIdProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.ApiBaseController`1.#ctor(MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{`0},Pluto.BlogCore.Infrastructure.Providers.EventIdProvider)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
            <param name="eventIdProvider"></param>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.CategoryController.#ctor(MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{Pluto.BlogCore.API.Controllers.CategoryController},Pluto.BlogCore.Infrastructure.Providers.EventIdProvider)">
            <summary>
            
            </summary>
            <param name="mediator"></param>
            <param name="logger"></param>
            <param name="eventIdProvider"></param>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.CategoryController.Get">
            <summary>
            获取全部分类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.CategoryController.Post(Pluto.BlogCore.API.Models.Requests.CreateCategoryRequest)">
            <summary>
            新建分类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.PostController.Get(System.String,System.Int32,System.Int32)">
            <summary>
            获取列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.PostController.Get(System.Int64)">
            <summary>
            获取详情
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.PostController.Post(Pluto.BlogCore.API.Models.Requests.CreatePostRequest)">
            <summary>
            创建post
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.YuqueController.GetYuqueAuthUrl(System.String)">
            <summary>
            获取语雀授权跳转地址
            </summary>
            <param name="callback">授权回调后的地址</param>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.YuqueController.YuqueAuthRedirect(System.String,System.String)">
            <summary>
            语雀跳转回调
            </summary>
            <param name="code"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.YuqueController.GetRepo(System.Int32)">
            <summary>
            获取用户的语雀知识库
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.YuqueController.GetDocs(System.String)">
            <summary>
            获取用户的语雀知识库文档
            </summary>
            <param name="repoId">知识库id</param>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Controllers.YuqueController.SyncDoc(System.String,System.String)">
            <summary>
            同步用户的语雀知识库文档详情
            </summary>
            <param name="repoId">知识库id</param>
            <param name="slug">文档slug</param>
            <returns></returns>
        </member>
        <member name="T:Pluto.BlogCore.API.Filters.ModelValidateFilter">
            <summary>
            model 验证过滤器
            </summary>
        </member>
        <member name="M:Pluto.BlogCore.API.Filters.ModelValidateFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Pluto.BlogCore.API.Filters.ModelValidateFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Pluto.BlogCore.API.HealthChecks.DatabaseHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Pluto.BlogCore.API.HealthChecks.MemoryHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Pluto.BlogCore.API.Middlewares.ApplicationBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pluto.BlogCore.API.Middlewares.ApplicationBuilderExtensions.UseExceptionProcess(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Pluto.BlogCore.API.Models.ApiResponse">
            <summary>
            接口response
            </summary>
        </member>
        <member name="M:Pluto.BlogCore.API.Models.ApiResponse.#ctor(System.String,System.String)">
            <summary>
            初始化ApiResponse的实例
            </summary>
            <param name="code"><see cref="T:Pluto.BlogCore.API.Models.AppResponseCode"/></param>
            <param name="msg"></param>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.ApiResponse.Code">
            <summary>
            响应码<see cref="T:Pluto.BlogCore.API.Models.AppResponseCode"/>
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.ApiResponse.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="M:Pluto.BlogCore.API.Models.ApiResponse.DefaultSuccess(System.String)">
            <summary>
            默认成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Models.ApiResponse.DefaultFail(System.String)">
            <summary>
            默认失败
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Models.ApiResponse.Fail(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="code"><see cref="T:Pluto.BlogCore.API.Models.AppResponseCode"/></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:Pluto.BlogCore.API.Models.ApiResponse`1">
            <summary>
            接口统一返回值
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Pluto.BlogCore.API.Models.ApiResponse`1.#ctor(System.String,System.String,`0)">
            <summary>
            初始化<see>
                <cref>ApiResponse:T</cref>
            </see>的实例
            </summary>
            <param name="code"><see cref="T:Pluto.BlogCore.API.Models.AppResponseCode"/></param>
            <param name="msg"></param>
            <param name="data"></param>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.ApiResponse`1.Data">
            <summary>
            数据域
            </summary>
        </member>
        <member name="M:Pluto.BlogCore.API.Models.ApiResponse`1.Success(`0)">
            <summary>
            带数据的成功
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Pluto.BlogCore.API.Models.ApiResponse`1.Fail(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pluto.BlogCore.API.Models.AppResponseCode">
            <summary>
            响应码集合
            </summary>
        </member>
        <member name="F:Pluto.BlogCore.API.Models.AppResponseCode.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Pluto.BlogCore.API.Models.AppResponseCode.Error">
            <summary>
            失败
            </summary>
        </member>
        <member name="F:Pluto.BlogCore.API.Models.AppResponseCode.InvalidParameter">
            <summary>
            无效参数
            </summary>
        </member>
        <member name="F:Pluto.BlogCore.API.Models.AppResponseCode.ResourceException">
            <summary>
            资源异常
            </summary>
        </member>
        <member name="T:Pluto.BlogCore.API.Models.Requests.CreatePostRequest">
            <summary>
            创建Post
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Requests.CreatePostRequest.Title">
            <summary>
            邮箱
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Requests.CreatePostRequest.Summary">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Requests.CreatePostRequest.CategoryId">
            <summary>
            类目id
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Requests.CreatePostRequest.Tags">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Requests.CreatePostRequest.IsSubmit">
            <summary>
            是否直接提交
            </summary>
        </member>
        <member name="M:Pluto.BlogCore.API.Models.Requests.CreatePostRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>Determines whether the specified object is valid.</summary>
            <param name="validationContext">The validation context.</param>
            <returns>A collection that holds failed-validation information.</returns>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Response.YuqueRepoResponse.Id">
            <summary>
            仓库编号
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Response.YuqueRepoResponse.Type">
            <summary>
            类型 [Book - 文档]
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Response.YuqueRepoResponse.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Response.YuqueRepoResponse.Public">
            <summary>
            是否公开 [true - 公开, false - 私密]
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Response.YuqueRepoResponse.NameSpace">
            <summary>
            仓库完整路径 user.login/book.slug
            </summary>
        </member>
        <member name="P:Pluto.BlogCore.API.Models.Response.YuqueRepoResponse.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:Pluto.BlogCore.API.Startup.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            配置第三方(autofac)容器
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Pluto.BlogCore.API.DbContextCreateFactory">
            <summary>
            指定设计时dbcontext 工厂
            code first 迁移时使用
            </summary>
            当program中没有默认的：
            public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
            });
            时，必须指定如何初始化创建dbcontext
        </member>
    </members>
</doc>
